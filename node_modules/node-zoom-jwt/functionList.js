//List Sub Accounts
  module.exports.accounts = async function accounts(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/accounts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Sub Account
  module.exports.accountcreate = async function accountcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/accounts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Sub Account
  module.exports.account = async function account(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Disassociate a Sub Account
  module.exports.accountdisassociate = async function accountdisassociate(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${accountId ? accountId : this.accountId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Options
  module.exports.accountoptionsupdate = async function accountoptionsupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/options`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Settings
  module.exports.accountsettings = async function accountsettings(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Settings
  module.exports.accountsettingsupdate = async function accountsettingsupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Managed Domains
  module.exports.accountmanageddomain = async function accountmanageddomain(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/managed_domains`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Trusted Domains
  module.exports.accounttrusteddomain = async function accounttrusteddomain(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/trusted_domains`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Locked Settings
  module.exports.getaccountlocksettings = async function getaccountlocksettings(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Locked Settings
  module.exports.updateaccountlocksettings = async function updateaccountlocksettings(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update the Account Owner
  module.exports.updateaccountowner = async function updateaccountowner(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${accountId ? accountId : this.accountId}/owner`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Upload virtual background files
  module.exports.uploadvb = async function uploadvb(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete virtual background files
  module.exports.delvb = async function delvb(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${accountId ? accountId : this.accountId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Billing Information
  module.exports.accountbilling = async function accountbilling(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/billing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Billing Information
  module.exports.accountbillingupdate = async function accountbillingupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/billing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Plan Information
  module.exports.accountplans = async function accountplans(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/plans`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Subscribe to Plans
  module.exports.accountplancreate = async function accountplancreate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/plans`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Base Plan
  module.exports.accountplanbaseupdate = async function accountplanbaseupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${accountId ? accountId : this.accountId}/plans/base`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add an Additional Plan
  module.exports.accountplanaddoncreate = async function accountplanaddoncreate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/plans/addons`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update an Additional Plan
  module.exports.accountplanaddonupdate = async function accountplanaddonupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${accountId ? accountId : this.accountId}/plans/addons`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Cancel Base Plan
  module.exports.accountplanbasedelete = async function accountplanbasedelete(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/plans/base/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Cancel  Additional Plans
  module.exports.accountplanaddoncancel = async function accountplanaddoncancel(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/plans/addons/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get plan usage
  module.exports.getplanusage = async function getplanusage(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/plans/usage`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List billing invoices
  module.exports.accountbillinginvoices = async function accountbillinginvoices(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/billing/invoices`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get invoice details
  module.exports.getaccountbillinginvoice = async function getaccountbillinginvoice(invoiceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${invoiceId ? invoiceId : this.invoiceId}/billing/invoices/{invoiceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Download an invoice file
  module.exports.downloadinvoicepdf = async function downloadinvoicepdf(invoiceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/api/download/billing/invoices/${invoiceId ? invoiceId : this.invoiceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Remove a Member
  module.exports.removeauserlevelchannelmember = async function removeauserlevelchannelmember(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/channels/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Channel
  module.exports.getuserlevelchannel = async function getuserlevelchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/channels/${channelId ? channelId : this.channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Channel
  module.exports.updateuserlevelchannel = async function updateuserlevelchannel(channelId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/chat/channels/${channelId ? channelId : this.channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Channel
  module.exports.deleteuserlevelchannel = async function deleteuserlevelchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/channels/${channelId ? channelId : this.channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Join a Channel
  module.exports.joinchannel = async function joinchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/channels/${channelId ? channelId : this.channelId}/members/me`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Leave a Channel
  module.exports.leavechannel = async function leavechannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/channels/${channelId ? channelId : this.channelId}/members/me`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List User's Channels
  module.exports.getchannels = async function getchannels(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${userId ? userId : this.userId}/channels`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Channel
  module.exports.createchannel = async function createchannel(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/users/${userId ? userId : this.userId}/channels`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Channel
  module.exports.getchannel = async function getchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Channel
  module.exports.updatechannel = async function updatechannel(channelId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Channel
  module.exports.deletechannel = async function deletechannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Channel Members
  module.exports.listchannelmembers = async function listchannelmembers(channelId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Invite Channel Members
  module.exports.invitechannelmembers = async function invitechannelmembers(channelId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Remove a Member
  module.exports.removeachannelmember = async function removeachannelmember(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/users/${memberId ? memberId : this.memberId}/channels/{channelId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Send a Chat Message
  module.exports.sendachatmessage = async function sendachatmessage(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/users/${userId ? userId : this.userId}/messages`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List User's Chat Messages
  module.exports.getchatmessages = async function getchatmessages(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${userId ? userId : this.userId}/messages`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Message
  module.exports.editmessage = async function editmessage(messageId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/chat/users/${messageId ? messageId : this.messageId}/messages/{messageId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Message
  module.exports.deletechatmessage = async function deletechatmessage(messageId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/users/${messageId ? messageId : this.messageId}/messages/{messageId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Send Chatbot Messages
  module.exports.sendchatbot = async function sendchatbot(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/im/chat/messages",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Edit a Chatbot Message
  module.exports.editchatbotmessage = async function editchatbotmessage(message_id,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/im/chat/messages/${message_id ? message_id : this.message_id}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Chatbot Message
  module.exports.deleteachatbotmessage = async function deleteachatbotmessage(message_id,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/im/chat/messages/${message_id ? message_id : this.message_id}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Search Company Contacts
  module.exports.searchcompanycontacts = async function searchcompanycontacts(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/contacts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List User's Contacts
  module.exports.getusercontacts = async function getusercontacts(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/chat/users/me/contacts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User's Contact Details
  module.exports.getusercontact = async function getusercontact(contactId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/me/contacts/${contactId ? contactId : this.contactId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List All Recordings
  module.exports.recordingslist = async function recordingslist(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Recordings
  module.exports.recordingget = async function recordingget(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete Meeting Recordings
  module.exports.recordingdelete = async function recordingdelete(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Meeting Recording File
  module.exports.recordingdeleteone = async function recordingdeleteone(recordingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${recordingId ? recordingId : this.recordingId}/recordings/{recordingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Recover Meeting Recordings
  module.exports.recordingstatusupdate = async function recordingstatusupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Recover a Single Recording
  module.exports.recordingstatusupdateone = async function recordingstatusupdateone(recordingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${recordingId ? recordingId : this.recordingId}/recordings/{recordingId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Recording Settings
  module.exports.recordingsettingupdate = async function recordingsettingupdate(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Meeting Recording Settings
  module.exports.recordingsettingsupdate = async function recordingsettingsupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Recording Registrants
  module.exports.meetingrecordingregistrants = async function meetingrecordingregistrants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Recording Registrant
  module.exports.meetingrecordingregistrantcreate = async function meetingrecordingregistrantcreate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Recording Registrant's Status
  module.exports.meetingrecordingregistrantstatus = async function meetingrecordingregistrantstatus(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Registration Questions
  module.exports.recordingregistrantsquestionsget = async function recordingregistrantsquestionsget(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Registration Questions
  module.exports.recordingregistrantquestionupdate = async function recordingregistrantquestionupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Recordings of an Account
  module.exports.getaccountcloudrecording = async function getaccountcloudrecording(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Meetings
  module.exports.dashboardmeetings = async function dashboardmeetings(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/meetings",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Details
  module.exports.dashboardmeetingdetail = async function dashboardmeetingdetail(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Meeting Participants
  module.exports.dashboardmeetingparticipants = async function dashboardmeetingparticipants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Participant QOS
  module.exports.dashboardmeetingparticipantqos = async function dashboardmeetingparticipantqos(participantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${participantId ? participantId : this.participantId}/participants/{participantId}/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Meeting Participants QOS
  module.exports.dashboardmeetingparticipantsqos = async function dashboardmeetingparticipantsqos(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Sharing/Recording Details of Meeting Participants
  module.exports.dashboardmeetingparticipantshare = async function dashboardmeetingparticipantshare(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants/sharing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Webinars
  module.exports.dashboardwebinars = async function dashboardwebinars(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/webinars",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Details
  module.exports.dashboardwebinardetail = async function dashboardwebinardetail(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Participants
  module.exports.dashboardwebinarparticipants = async function dashboardwebinarparticipants(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Participant QOS
  module.exports.dashboardwebinarparticipantqos = async function dashboardwebinarparticipantqos(participantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${participantId ? participantId : this.participantId}/participants/{participantId}/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Webinar Participant QOS
  module.exports.dashboardwebinarparticipantsqos = async function dashboardwebinarparticipantsqos(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Sharing/Recording Details of Webinar Participants
  module.exports.dashboardwebinarparticipantshare = async function dashboardwebinarparticipantshare(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants/sharing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Zoom Rooms
  module.exports.dashboardzoomrooms = async function dashboardzoomrooms(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/zoomrooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Rooms Details
  module.exports.dashboardzoomroom = async function dashboardzoomroom(zoomroomId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/zoomrooms/${zoomroomId ? zoomroomId : this.zoomroomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get CRC Port Usage
  module.exports.dashboardcrc = async function dashboardcrc(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/crc",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get IM Metrics
  module.exports.dashboardim = async function dashboardim(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/im",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Zoom Meetings Client Feedbacks
  module.exports.dashboardclientfeedback = async function dashboardclientfeedback(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/client/feedback",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Top 25 issues of Zoom Rooms
  module.exports.dashboardzoomroomissue = async function dashboardzoomroomissue(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/zoomrooms/issues",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Top 25 Zoom Rooms with Issues
  module.exports.dashboardissuezoomroom = async function dashboardissuezoomroom(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/issues/zoomrooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Issues of Zoom Rooms 
  module.exports.dashboardissuedetailzoomroom = async function dashboardissuedetailzoomroom(zoomroomId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/issues/zoomrooms/${zoomroomId ? zoomroomId : this.zoomroomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Meetings Client Feedback
  module.exports.dashboardclientfeedbackdetail = async function dashboardclientfeedbackdetail(feedbackId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/client/feedback/${feedbackId ? feedbackId : this.feedbackId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Client Meeting Satisfaction 
  module.exports.listmeetingsatisfaction = async function listmeetingsatisfaction(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/client/satisfaction",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Call Logs
  module.exports.listcalllogsmetrics = async function listcalllogsmetrics(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/metrics/call_logs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Call Log Details
  module.exports.getcalllogmetricsdetails = async function getcalllogmetricsdetails(call_id) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/metrics/call_logs/${call_id ? call_id : this.call_id}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Call QoS
  module.exports.getcallqos = async function getcallqos(callId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/metrics/call_logs/${callId ? callId : this.callId}/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get post meeting feedback
  module.exports.participantfeedback = async function participantfeedback(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants/satisfaction`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get post webinar feedback
  module.exports.participantwebinarfeedback = async function participantwebinarfeedback(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants/satisfaction`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List H.323/SIP Devices
  module.exports.devicelist = async function devicelist(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/h323/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a H.323/SIP Device
  module.exports.devicecreate = async function devicecreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/h323/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a H.323/SIP Device
  module.exports.deviceupdate = async function deviceupdate(deviceId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/h323/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a H.323/SIP Device
  module.exports.devicedelete = async function devicedelete(deviceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/h323/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Groups
  module.exports.groups = async function groups() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Group
  module.exports.groupcreate = async function groupcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Group
  module.exports.group = async function group(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Group
  module.exports.groupupdate = async function groupupdate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Group
  module.exports.groupdelete = async function groupdelete(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Group Members 
  module.exports.groupmembers = async function groupmembers(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Group Members
  module.exports.groupmemberscreate = async function groupmemberscreate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Group Member
  module.exports.groupmembersdelete = async function groupmembersdelete(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Group Member
  module.exports.updateagroupmember = async function updateagroupmember(memberId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Group's Settings
  module.exports.getgroupsettings = async function getgroupsettings(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Group's Settings
  module.exports.updategroupsettings = async function updategroupsettings(groupId,queryArgs,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${groupId ? groupId : this.groupId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Locked Settings
  module.exports.getgrouplocksettings = async function getgrouplocksettings(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Locked Settings
  module.exports.grouplockedsettings = async function grouplockedsettings(groupId,queryArgs,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${groupId ? groupId : this.groupId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete virtual background files
  module.exports.delgroupvb = async function delgroupvb(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/groups/${groupId ? groupId : this.groupId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Upload virtual background files
  module.exports.uploadgroupvb = async function uploadgroupvb(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/groups/${groupId ? groupId : this.groupId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List IM Directory Groups
  module.exports.imgroups = async function imgroups() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/im/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create an IM Directory Group
  module.exports.imgroupcreate = async function imgroupcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/im/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Retrieve an IM Directory Group
  module.exports.imgroup = async function imgroup(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/im/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update an IM Directory Group
  module.exports.imgroupupdate = async function imgroupupdate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/im/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete an IM Directory Group
  module.exports.imgroupdelete = async function imgroupdelete(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/im/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List IM Directory Group Members
  module.exports.imgroupmembers = async function imgroupmembers(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/im/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add IM Directory Group Members
  module.exports.imgroupmemberscreate = async function imgroupmemberscreate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/im/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete an IM Directory Group Member
  module.exports.imgroupmembersdelete = async function imgroupmembersdelete(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/im/groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Meetings
  module.exports.meetings = async function meetings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/meetings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a meeting
  module.exports.meetingcreate = async function meetingcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/meetings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Meeting
  module.exports.meeting = async function meeting(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a meeting
  module.exports.meetingupdate = async function meetingupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Meeting
  module.exports.meetingdelete = async function meetingdelete(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Meeting Status
  module.exports.meetingstatus = async function meetingstatus(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Meeting Registrants
  module.exports.meetingregistrants = async function meetingregistrants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Meeting Registrant
  module.exports.meetingregistrantcreate = async function meetingregistrantcreate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Meeting Registrant Status
  module.exports.meetingregistrantstatus = async function meetingregistrantstatus(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Past Meeting Details
  module.exports.pastmeetingdetails = async function pastmeetingdetails(meetingUUID) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingUUID ? meetingUUID : this.meetingUUID}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Past Meeting Participants
  module.exports.pastmeetingparticipants = async function pastmeetingparticipants(meetingUUID,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingUUID ? meetingUUID : this.meetingUUID}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Ended Meeting Instances
  module.exports.pastmeetings = async function pastmeetings(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingId ? meetingId : this.meetingId}/instances`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Meeting Polls
  module.exports.meetingpolls = async function meetingpolls(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Meeting Poll
  module.exports.meetingpollcreate = async function meetingpollcreate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Meeting Poll
  module.exports.meetingpollget = async function meetingpollget(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Meeting Poll
  module.exports.meetingpollupdate = async function meetingpollupdate(pollId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Meeting Poll
  module.exports.meetingpolldelete = async function meetingpolldelete(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Registration Questions 
  module.exports.meetingregistrantsquestionsget = async function meetingregistrantsquestionsget(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Registration Questions
  module.exports.meetingregistrantquestionupdate = async function meetingregistrantquestionupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Invitation
  module.exports.meetinginvitation = async function meetinginvitation(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/invitation`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Live Stream
  module.exports.meetinglivestreamupdate = async function meetinglivestreamupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/livestream`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Live Stream Details
  module.exports.getlivestreamdetails = async function getlivestreamdetails(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/livestream`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Live Stream Status
  module.exports.meetinglivestreamstatusupdate = async function meetinglivestreamstatusupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/livestream/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Past Meeting's Poll Results
  module.exports.listpastmeetingpolls = async function listpastmeetingpolls(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Use In-Meeting Recording Controls
  module.exports.inmeetingrecordingcontrol = async function inmeetingrecordingcontrol(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/live_meetings/${meetingId ? meetingId : this.meetingId}/events`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Perform Batch Poll Creation
  module.exports.createbatchpolls = async function createbatchpolls(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/batch_polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List meeting templates
  module.exports.listmeetingtemplates = async function listmeetingtemplates(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/meeting_templates`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List a User's PAC Accounts
  module.exports.userpacs = async function userpacs(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/pac`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Phone Numbers
  module.exports.listaccountphonenumbers = async function listaccountphonenumbers(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/numbers",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User's Profile
  module.exports.phoneuser = async function phoneuser(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update User's Profile
  module.exports.updateuserprofile = async function updateuserprofile(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User's Settings
  module.exports.phoneusersettings = async function phoneusersettings(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User's Call Logs
  module.exports.phoneusercalllogs = async function phoneusercalllogs(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/call_logs`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User's Recordings
  module.exports.phoneuserrecordings = async function phoneuserrecordings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User's Voicemails
  module.exports.phoneuservoicemails = async function phoneuservoicemails(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/voice_mails`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Account's Call Logs
  module.exports.accountcalllogs = async function accountcalllogs(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/call_logs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign Phone Number to User 
  module.exports.assignphonenumber = async function assignphonenumber(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/users/${userId ? userId : this.userId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign User's Phone Number
  module.exports.unassignphonenumber = async function unassignphonenumber(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/users/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign Calling Plan to a User
  module.exports.assigncallingplan = async function assigncallingplan(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/users/${userId ? userId : this.userId}/calling_plans`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign User's Calling Plan
  module.exports.unassigncallingplan = async function unassigncallingplan(type) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/users/${type ? type : this.type}/calling_plans/{type}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Phone Number Details
  module.exports.getphonenumberdetails = async function getphonenumberdetails(numberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/numbers/${numberId ? numberId : this.numberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Change Main Company Number
  module.exports.changemaincompanynumber = async function changemaincompanynumber(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        "/phone/company_number",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Calling Plans
  module.exports.listcallingplans = async function listcallingplans() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/calling_plans",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Phone Users
  module.exports.listphoneusers = async function listphoneusers(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a user's call log
  module.exports.deletecalllog = async function deletecalllog(callLogId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/users/${callLogId ? callLogId : this.callLogId}/call_logs/{callLogId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add BYOC phone numbers
  module.exports.addbyocnumber = async function addbyocnumber(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/byoc_numbers",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a voicemail
  module.exports.deletevoicemail = async function deletevoicemail(voicemailId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/voice_mails/${voicemailId ? voicemailId : this.voicemailId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Auto Receptionist Details 
  module.exports.updateautoreceptionist = async function updateautoreceptionist(autoReceptionistId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/auto_receptionists/${autoReceptionistId ? autoReceptionistId : this.autoReceptionistId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign Phone Numbers
  module.exports.assignphonenumbersautoreceptionist = async function assignphonenumbersautoreceptionist(autoReceptionistId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/auto_receptionists/${autoReceptionistId ? autoReceptionistId : this.autoReceptionistId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign all Phone Numbers
  module.exports.unassignallphonenumsautoreceptionist = async function unassignallphonenumsautoreceptionist(autoReceptionistId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/auto_receptionists/${autoReceptionistId ? autoReceptionistId : this.autoReceptionistId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign a Phone Number
  module.exports.unassignaphonenumautoreceptionist = async function unassignaphonenumautoreceptionist(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/auto_receptionists/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add an Auto Receptionist
  module.exports.addautoreceptionist = async function addautoreceptionist(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/auto_receptionists",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Blocked List
  module.exports.addanumbertoblockedlist = async function addanumbertoblockedlist(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/blocked_list",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Blocked Lists
  module.exports.listblockedlist = async function listblockedlist(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/blocked_list",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Blocked List
  module.exports.updateblockedlist = async function updateblockedlist(blockedListId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/blocked_list/${blockedListId ? blockedListId : this.blockedListId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Blocked List
  module.exports.deleteablockedlist = async function deleteablockedlist(blockedListId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/blocked_list/${blockedListId ? blockedListId : this.blockedListId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Blocked List Details
  module.exports.getablockedlist = async function getablockedlist(blockedListId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/blocked_list/${blockedListId ? blockedListId : this.blockedListId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Call Queue
  module.exports.createcallqueue = async function createcallqueue(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/call_queues",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Call Queues
  module.exports.listcallqueues = async function listcallqueues(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/call_queues",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Call Queue Details
  module.exports.getacallqueue = async function getacallqueue(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Call Queue Details
  module.exports.updatecallqueue = async function updatecallqueue(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Call Queue
  module.exports.deleteacallqueue = async function deleteacallqueue(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign Numbers to a Call Queue
  module.exports.assignphonetocallqueue = async function assignphonetocallqueue(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign all Phone Numbers
  module.exports.unassignaphonenumcallqueue = async function unassignaphonenumcallqueue(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign a Phone Number
  module.exports.unassignphonenumcallqueue = async function unassignphonenumcallqueue(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Members to a Call Queue
  module.exports.addmemberstocallqueue = async function addmemberstocallqueue(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign all Members
  module.exports.unassignallmembers = async function unassignallmembers(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign a Member
  module.exports.unassignmemberfromcallqueue = async function unassignmemberfromcallqueue(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Change Call Queue Manager
  module.exports.changecallqueuemanager = async function changecallqueuemanager(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/manager`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Call Queue Recordings
  module.exports.getcallqueuerecordings = async function getcallqueuerecordings(callQueueId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add a Device
  module.exports.addphonedevice = async function addphonedevice(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Devices
  module.exports.listphonedevices = async function listphonedevices(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Device
  module.exports.updateadevice = async function updateadevice(deviceId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Device
  module.exports.deleteadevice = async function deleteadevice(deviceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Device Details
  module.exports.getadevice = async function getadevice(deviceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get operation logs report
  module.exports.getpsoperationlogs = async function getpsoperationlogs(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/reports/operationlogs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Shared Line Groups
  module.exports.listsharedlinegroups = async function listsharedlinegroups(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/shared_line_groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Shared Line Group
  module.exports.getasharedlinegroup = async function getasharedlinegroup(sharedLineGroupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Shared Line Group
  module.exports.updateasharedlinegroup = async function updateasharedlinegroup(sharedLineGroupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Shared Line Group
  module.exports.deleteasharedlinegroup = async function deleteasharedlinegroup(sharedLineGroupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Members to a Shared Line Group
  module.exports.addmemberstosharedlinegroup = async function addmemberstosharedlinegroup(sharedLineGroupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign Members of a Shared Line Group
  module.exports.deletemembersofslg = async function deletemembersofslg(sharedLineGroupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign a Member From a Shared Line Group
  module.exports.deleteamemberslg = async function deleteamemberslg(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign Phone Numbers
  module.exports.assignphonenumbersslg = async function assignphonenumbersslg(sharedLineGroupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign a Phone Number
  module.exports.deleteaphonenumberslg = async function deleteaphonenumberslg(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Phone Site
  module.exports.createphonesite = async function createphonesite(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/sites",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Phone Sites
  module.exports.listphonesites = async function listphonesites(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/sites",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Phone Site Details
  module.exports.getasite = async function getasite(siteId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/sites/${siteId ? siteId : this.siteId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Phone Site
  module.exports.deletephonesite = async function deletephonesite(siteId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/sites/${siteId ? siteId : this.siteId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Phone Site Details
  module.exports.updatesitedetails = async function updatesitedetails(siteId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/sites/${siteId ? siteId : this.siteId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add a Common Area Phone
  module.exports.addcommonareaphone = async function addcommonareaphone(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/common_area_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Common Area Phones
  module.exports.listcommonareaphones = async function listcommonareaphones(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/common_area_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Common Area Phone Details
  module.exports.getacommonareaphone = async function getacommonareaphone(commonAreaPhoneId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/common_area_phones/${commonAreaPhoneId ? commonAreaPhoneId : this.commonAreaPhoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Common Area Phone
  module.exports.updatecommonareaphone = async function updatecommonareaphone(commonAreaPhoneId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/common_area_phones/${commonAreaPhoneId ? commonAreaPhoneId : this.commonAreaPhoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Common Area Phone
  module.exports.deletecommonareaphone = async function deletecommonareaphone(commonAreaPhoneId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/common_area_phones/${commonAreaPhoneId ? commonAreaPhoneId : this.commonAreaPhoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Daily Usage Report
  module.exports.reportdaily = async function reportdaily(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/daily",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Active/Inactive Host Reports
  module.exports.reportusers = async function reportusers(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Reports
  module.exports.reportmeetings = async function reportmeetings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/users/${userId ? userId : this.userId}/meetings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Detail Reports
  module.exports.reportmeetingdetails = async function reportmeetingdetails(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Participant Reports
  module.exports.reportmeetingparticipants = async function reportmeetingparticipants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/meetings/${meetingId ? meetingId : this.meetingId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Meeting Poll Reports
  module.exports.reportmeetingpolls = async function reportmeetingpolls(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Detail Reports
  module.exports.reportwebinardetails = async function reportwebinardetails(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Participant Reports
  module.exports.reportwebinarparticipants = async function reportwebinarparticipants(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Poll Reports
  module.exports.reportwebinarpolls = async function reportwebinarpolls(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Q&A Report
  module.exports.reportwebinarqa = async function reportwebinarqa(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}/qa`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get telephone reports
  module.exports.reporttelephone = async function reporttelephone(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/telephone",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Cloud Recording Usage Report
  module.exports.reportcloudrecording = async function reportcloudrecording(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/cloud_recording",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get operation logs report
  module.exports.reportoperationlogs = async function reportoperationlogs(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/operationlogs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Sign In / Sign Out Activity Report
  module.exports.reportsigninsignoutactivities = async function reportsigninsignoutactivities(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/activities",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Roles
  module.exports.roles = async function roles() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/roles",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Role
  module.exports.createrole = async function createrole(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/roles",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Members in a Role
  module.exports.rolemembers = async function rolemembers(roleId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/roles/${roleId ? roleId : this.roleId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign a Role to Members
  module.exports.addrolemembers = async function addrolemembers(roleId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/roles/${roleId ? roleId : this.roleId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Unassign a Member's Role
  module.exports.rolememberdelete = async function rolememberdelete(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/roles/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Role Information
  module.exports.getroleinformation = async function getroleinformation(roleId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/roles/${roleId ? roleId : this.roleId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Role Information
  module.exports.updaterole = async function updaterole(roleId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/roles/${roleId ? roleId : this.roleId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Role
  module.exports.deleterole = async function deleterole(roleId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/roles/${roleId ? roleId : this.roleId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Zoom Rooms
  module.exports.listzoomrooms = async function listzoomrooms(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add a Zoom Room
  module.exports.addaroom = async function addaroom(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/rooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Room Profile
  module.exports.getzrprofile = async function getzrprofile(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/${roomId ? roomId : this.roomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Zoom Room
  module.exports.deleteazoomroom = async function deleteazoomroom(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/rooms/${roomId ? roomId : this.roomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Zoom Room Profile
  module.exports.updateroomprofile = async function updateroomprofile(roomId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/${roomId ? roomId : this.roomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Room Settings
  module.exports.getzrsettings = async function getzrsettings(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/${roomId ? roomId : this.roomId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Zoom Room Settings
  module.exports.updatezrsettings = async function updatezrsettings(roomId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/${roomId ? roomId : this.roomId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Zoom Room Devices
  module.exports.listzrdevices = async function listzrdevices(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/${roomId ? roomId : this.roomId}/devices`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Change a Zoom Room's Location
  module.exports.changezrlocation = async function changezrlocation(roomId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/rooms/${roomId ? roomId : this.roomId}/location`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Check-in or Check-out of a Zoom Room
  module.exports.checkinrooms = async function checkinrooms(id,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/${id ? id : this.id}/events`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Digital Signage Contents
  module.exports.listdigitalsignagecontent = async function listdigitalsignagecontent(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/digital_signage",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update E911 digital signage
  module.exports.managee911signage = async function managee911signage(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/events",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Room Account Profile
  module.exports.getzraccountprofile = async function getzraccountprofile() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/account_profile",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Zoom Room Account Profile
  module.exports.updatezraccprofile = async function updatezraccprofile(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/account_profile",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Room Account Settings
  module.exports.getzraccountsettings = async function getzraccountsettings() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/account_settings",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Zoom Room Account Settings
  module.exports.updatezoomroomaccsettings = async function updatezoomroomaccsettings(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/account_settings",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Zoom Room Locations
  module.exports.listzrlocations = async function listzrlocations(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/locations",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add a Location
  module.exports.addazrlocation = async function addazrlocation(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/rooms/locations",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Room Location Profile 
  module.exports.getzrlocationprofile = async function getzrlocationprofile(locationId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/locations/${locationId ? locationId : this.locationId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Zoom Room Location Profile
  module.exports.updatezrlocationprofile = async function updatezrlocationprofile(locationId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/locations/${locationId ? locationId : this.locationId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Location Settings 
  module.exports.getzrlocationsettings = async function getzrlocationsettings(locationId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/locations/${locationId ? locationId : this.locationId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Location Settings
  module.exports.updatezrlocationsettings = async function updatezrlocationsettings(locationId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/locations/${locationId ? locationId : this.locationId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Zoom Room Location Structure
  module.exports.getzrlocationstructure = async function getzrlocationstructure() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/locations/structure",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Zoom Rooms Location Structure
  module.exports.updatezoomroomslocationstructure = async function updatezoomroomslocationstructure(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/locations/structure",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Change the Assigned Parent Location
  module.exports.changeparentlocation = async function changeparentlocation(locationId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/rooms/locations/${locationId ? locationId : this.locationId}/location`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List SIP Phones
  module.exports.listsipphones = async function listsipphones(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/sip_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create SIP Phone
  module.exports.createsipphone = async function createsipphone(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/sip_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update SIP Phone
  module.exports.updatesipphone = async function updatesipphone(phoneId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/sip_phones/${phoneId ? phoneId : this.phoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete SIP Phone
  module.exports.deletesipphone = async function deletesipphone(phoneId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/sip_phones/${phoneId ? phoneId : this.phoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Tracking Fields
  module.exports.trackingfieldlist = async function trackingfieldlist() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/tracking_fields",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Tracking Field
  module.exports.trackingfieldcreate = async function trackingfieldcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/tracking_fields",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Tracking Field
  module.exports.trackingfieldget = async function trackingfieldget(fieldId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/tracking_fields/${fieldId ? fieldId : this.fieldId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Tracking Field
  module.exports.trackingfieldupdate = async function trackingfieldupdate(fieldId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/tracking_fields/${fieldId ? fieldId : this.fieldId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Tracking Field
  module.exports.trackingfielddelete = async function trackingfielddelete(fieldId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/tracking_fields/${fieldId ? fieldId : this.fieldId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Account's TSP Information
  module.exports.tsp = async function tsp() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/tsp",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update account's TSP information
  module.exports.tspupdate = async function tspupdate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/tsp",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List User's TSP accounts
  module.exports.usertsps = async function usertsps(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/tsp`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add a User's TSP Account
  module.exports.usertspcreate = async function usertspcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/tsp`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a User's TSP Account
  module.exports.usertsp = async function usertsp(tspId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${tspId ? tspId : this.tspId}/tsp/{tspId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a TSP Account
  module.exports.usertspupdate = async function usertspupdate(tspId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${tspId ? tspId : this.tspId}/tsp/{tspId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a User's TSP Account
  module.exports.usertspdelete = async function usertspdelete(tspId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${tspId ? tspId : this.tspId}/tsp/{tspId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Set Global Dial-in URL for a TSP User
  module.exports.tspurlupdate = async function tspurlupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${userId ? userId : this.userId}/tsp/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Users
  module.exports.users = async function users(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create Users
  module.exports.usercreate = async function usercreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a User
  module.exports.user = async function user(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a User
  module.exports.userupdate = async function userupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete User
  module.exports.userdelete = async function userdelete(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List User Assistants
  module.exports.userassistants = async function userassistants(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/assistants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Assistants
  module.exports.userassistantcreate = async function userassistantcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/assistants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete User Assistants
  module.exports.userassistantsdelete = async function userassistantsdelete(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/assistants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a User Assistant
  module.exports.userassistantdelete = async function userassistantdelete(assistantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${assistantId ? assistantId : this.assistantId}/assistants/{assistantId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List User Schedulers
  module.exports.userschedulers = async function userschedulers(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/schedulers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete User Schedulers
  module.exports.userschedulersdelete = async function userschedulersdelete(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/schedulers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Scheduler
  module.exports.userschedulerdelete = async function userschedulerdelete(schedulerId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${schedulerId ? schedulerId : this.schedulerId}/schedulers/{schedulerId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Upload a User's Profile Picture
  module.exports.userpicture = async function userpicture(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/picture`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User Settings
  module.exports.usersettings = async function usersettings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update User Settings
  module.exports.usersettingsupdate = async function usersettingsupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${userId ? userId : this.userId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update User Status
  module.exports.userstatus = async function userstatus(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a User's Password
  module.exports.userpassword = async function userpassword(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/password`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get User Permissions
  module.exports.userpermission = async function userpermission(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/permissions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a User Token
  module.exports.usertoken = async function usertoken(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/token`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Revoke a User's SSO Token
  module.exports.userssotokendelete = async function userssotokendelete(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/token`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Check a User Email
  module.exports.useremail = async function useremail() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/users/email",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a User's Email
  module.exports.useremailupdate = async function useremailupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/email`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Check a User's PM Room Name
  module.exports.uservanityname = async function uservanityname() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/users/vanity_name",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Switch a User's Account
  module.exports.switchuseraccount = async function switchuseraccount(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${userId ? userId : this.userId}/users/{userId}/account`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a User's Presence Status
  module.exports.updatepresencestatus = async function updatepresencestatus(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/presence_status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Upload virtual background files
  module.exports.uploadvbuser = async function uploadvbuser(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete virtual background files
  module.exports.deluservb = async function deluservb(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Webinars
  module.exports.webinars = async function webinars(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/webinars`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Webinar
  module.exports.webinarcreate = async function webinarcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/webinars`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Webinar
  module.exports.webinar = async function webinar(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Webinar
  module.exports.webinarupdate = async function webinarupdate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Webinar
  module.exports.webinardelete = async function webinardelete(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Webinar Status
  module.exports.webinarstatus = async function webinarstatus(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/webinars/${webinarId ? webinarId : this.webinarId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Panelists
  module.exports.webinarpanelists = async function webinarpanelists(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/panelists`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Panelists
  module.exports.webinarpanelistcreate = async function webinarpanelistcreate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/webinars/${webinarId ? webinarId : this.webinarId}/panelists`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Remove Panelists
  module.exports.webinarpanelistsdelete = async function webinarpanelistsdelete(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${webinarId ? webinarId : this.webinarId}/panelists`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Remove a Panelist
  module.exports.webinarpanelistdelete = async function webinarpanelistdelete(panelistId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${panelistId ? panelistId : this.panelistId}/panelists/{panelistId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Webinar Registrants
  module.exports.webinarregistrants = async function webinarregistrants(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add a Webinar Registrant
  module.exports.webinarregistrantcreate = async function webinarregistrantcreate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Webinar Registrant Status
  module.exports.webinarregistrantstatus = async function webinarregistrantstatus(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Past Webinar Instances
  module.exports.pastwebinars = async function pastwebinars(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${webinarId ? webinarId : this.webinarId}/instances`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List a Webinar's Polls 
  module.exports.webinarpolls = async function webinarpolls(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Create a Webinar's Poll
  module.exports.webinarpollcreate = async function webinarpollcreate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Webinar Poll
  module.exports.webinarpollget = async function webinarpollget(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update a Webinar Poll
  module.exports.webinarpollupdate = async function webinarpollupdate(pollId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/webinars/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a Webinar Poll
  module.exports.webinarpolldelete = async function webinarpolldelete(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Registration Questions
  module.exports.webinarregistrantsquestionsget = async function webinarregistrantsquestionsget(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Update Registration Questions
  module.exports.webinarregistrantquestionupdate = async function webinarregistrantquestionupdate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get a Webinar Registrant
  module.exports.webinarregistrantget = async function webinarregistrantget(registrantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${registrantId ? registrantId : this.registrantId}/registrants/{registrantId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Absentees
  module.exports.webinarabsentees = async function webinarabsentees(WebinarUUID,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${WebinarUUID ? WebinarUUID : this.WebinarUUID}/absentees`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Get Webinar Tracking Sources
  module.exports.gettrackingsources = async function gettrackingsources(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/tracking_sources`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Past Webinar Poll Results
  module.exports.listpastwebinarpollresults = async function listpastwebinarpollresults(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Q&A of Past Webinar
  module.exports.listpastwebinarqa = async function listpastwebinarqa(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${webinarId ? webinarId : this.webinarId}/qa`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Webinar Templates
  module.exports.listwebinartemplates = async function listwebinartemplates(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/webinar_templates`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Change Zoom Rooms App Version
  module.exports.changezoomroomsappversion = async function changezoomroomsappversion(deviceId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/rooms/${deviceId ? deviceId : this.deviceId}/devices/{deviceId}/app_version`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List SIP Trunk Numbers
  module.exports.listsiptrunknumbers = async function listsiptrunknumbers() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/sip_trunk/numbers",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign SIP Trunk Configuration
  module.exports.assignsipconfig = async function assignsipconfig(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign Numbers
  module.exports.assignsiptrunknumbers = async function assignsiptrunknumbers(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete All Numbers
  module.exports.deleteallsipnumbers = async function deleteallsipnumbers(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List SIP Trunks
  module.exports.listsiptrunks = async function listsiptrunks(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/trunks`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Assign SIP Trunks
  module.exports.assignsiptrunks = async function assignsiptrunks(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/trunks`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete a SIP Trunk
  module.exports.deletesiptrunk = async function deletesiptrunk(trunkId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${trunkId ? trunkId : this.trunkId}/sip_trunk/trunks/{trunkId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Internal Call-out Countries
  module.exports.addcalloutcountries = async function addcalloutcountries(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/callout_countries`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Internal Call-out Countries
  module.exports.listinternalcalloutcountries = async function listinternalcalloutcountries(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/callout_countries`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete Internal Call-out Country
  module.exports.deleteinternalcalloutcountry = async function deleteinternalcalloutcountry(countryId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${countryId ? countryId : this.countryId}/sip_trunk/callout_countries/{countryId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Add Internal Numbers
  module.exports.addinternalnumbers = async function addinternalnumbers(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/internal_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Internal Numbers
  module.exports.listinternalnumbers = async function listinternalnumbers(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/internal_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //Delete an Internal Number
  module.exports.deleteinternalnumber = async function deleteinternalnumber(numberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${numberId ? numberId : this.numberId}/sip_trunk/internal_numbers/{numberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  //List Past Meeting Files
  module.exports.listpastmeetingfiles = async function listpastmeetingfiles(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingId ? meetingId : this.meetingId}/files`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  }
  
  