const axios = require("axios");
const jwt = require("jsonwebtoken");
const qs = require("qs");

let axiosZoom;

// Creates a Zoom object to connect & handle requests
const Zoom = {
  //Create token using the ApiKey and APISecret from config.js
  connect: function connect(
    apiKey,
    apiSecret,
    expiration = new Date().getTime() + 5000
  ) {
    try {
      const payload = {
        iss: apiKey,
        exp: expiration,
      };
      const token = jwt.sign(payload, apiSecret);

      // add default header to axios
      axiosZoom = axios.create({
        headers: {
          Authorization: `Bearer ${token}`,
          "User-Agent": "Zoom-Jwt-Request",
          "content-type": "application/json",
        },
      });
    } catch (err) {
      throw err;
    }
  },
  // Default base url for zoom to connect to
  baseUrl: "https://api.zoom.us/v2/",
  // Sets the base url for zoom to connect to
  setBaseUrl: function (url){
    this.baseUrl = url
  },
  // The default user for the Zoom object. Can be set to the email of another user
  userId: "me",
  // Set the user id for the Zoom object
  setUser: function (userId){
    this.userId = userId
  },
  go: async function (method, path, queryArgs = null, data = ""){
    try {
      const query = queryArgs ? "?" + qs.stringify(queryArgs) : "";
      const url = `${this.baseUrl}${path}${query}`;
      const zoomResponse = await axiosZoom({
        method: method,
        url: url,
        data: data,
        json: true, // Automatically parses the JSON string in the response
      });
      return zoomResponse;
    } catch (error) {
      throw error;
    }
  },
  
accounts: async function accounts(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/accounts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountcreate: async function accountcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/accounts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
account: async function account(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountdisassociate: async function accountdisassociate(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${accountId ? accountId : this.accountId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountoptionsupdate: async function accountoptionsupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/options`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountsettings: async function accountsettings(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountsettingsupdate: async function accountsettingsupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountmanageddomain: async function accountmanageddomain(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/managed_domains`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accounttrusteddomain: async function accounttrusteddomain(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/trusted_domains`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getaccountlocksettings: async function getaccountlocksettings(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateaccountlocksettings: async function updateaccountlocksettings(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateaccountowner: async function updateaccountowner(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${accountId ? accountId : this.accountId}/owner`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
uploadvb: async function uploadvb(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
delvb: async function delvb(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${accountId ? accountId : this.accountId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountbilling: async function accountbilling(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/billing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountbillingupdate: async function accountbillingupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/billing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplans: async function accountplans(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/plans`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplancreate: async function accountplancreate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/plans`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplanbaseupdate: async function accountplanbaseupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${accountId ? accountId : this.accountId}/plans/base`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplanaddoncreate: async function accountplanaddoncreate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/plans/addons`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplanaddonupdate: async function accountplanaddonupdate(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${accountId ? accountId : this.accountId}/plans/addons`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplanbasedelete: async function accountplanbasedelete(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/plans/base/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountplanaddoncancel: async function accountplanaddoncancel(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/plans/addons/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getplanusage: async function getplanusage(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/plans/usage`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountbillinginvoices: async function accountbillinginvoices(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/billing/invoices`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getaccountbillinginvoice: async function getaccountbillinginvoice(invoiceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${invoiceId ? invoiceId : this.invoiceId}/billing/invoices/{invoiceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
downloadinvoicepdf: async function downloadinvoicepdf(invoiceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/api/download/billing/invoices/${invoiceId ? invoiceId : this.invoiceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
removeauserlevelchannelmember: async function removeauserlevelchannelmember(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/channels/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getuserlevelchannel: async function getuserlevelchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/channels/${channelId ? channelId : this.channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateuserlevelchannel: async function updateuserlevelchannel(channelId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/chat/channels/${channelId ? channelId : this.channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteuserlevelchannel: async function deleteuserlevelchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/channels/${channelId ? channelId : this.channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
joinchannel: async function joinchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/channels/${channelId ? channelId : this.channelId}/members/me`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
leavechannel: async function leavechannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/channels/${channelId ? channelId : this.channelId}/members/me`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getchannels: async function getchannels(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${userId ? userId : this.userId}/channels`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
createchannel: async function createchannel(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/users/${userId ? userId : this.userId}/channels`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getchannel: async function getchannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatechannel: async function updatechannel(channelId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletechannel: async function deletechannel(channelId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listchannelmembers: async function listchannelmembers(channelId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
invitechannelmembers: async function invitechannelmembers(channelId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/users/${channelId ? channelId : this.channelId}/channels/{channelId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
removeachannelmember: async function removeachannelmember(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/users/${memberId ? memberId : this.memberId}/channels/{channelId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
sendachatmessage: async function sendachatmessage(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/chat/users/${userId ? userId : this.userId}/messages`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getchatmessages: async function getchatmessages(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/${userId ? userId : this.userId}/messages`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
editmessage: async function editmessage(messageId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/chat/users/${messageId ? messageId : this.messageId}/messages/{messageId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletechatmessage: async function deletechatmessage(messageId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/chat/users/${messageId ? messageId : this.messageId}/messages/{messageId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
sendchatbot: async function sendchatbot(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/im/chat/messages",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
editchatbotmessage: async function editchatbotmessage(message_id,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/im/chat/messages/${message_id ? message_id : this.message_id}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteachatbotmessage: async function deleteachatbotmessage(message_id,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/im/chat/messages/${message_id ? message_id : this.message_id}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
searchcompanycontacts: async function searchcompanycontacts(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/contacts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getusercontacts: async function getusercontacts(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/chat/users/me/contacts",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getusercontact: async function getusercontact(contactId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/chat/users/me/contacts/${contactId ? contactId : this.contactId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingslist: async function recordingslist(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingget: async function recordingget(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingdelete: async function recordingdelete(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingdeleteone: async function recordingdeleteone(recordingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${recordingId ? recordingId : this.recordingId}/recordings/{recordingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingstatusupdate: async function recordingstatusupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingstatusupdateone: async function recordingstatusupdateone(recordingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${recordingId ? recordingId : this.recordingId}/recordings/{recordingId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingsettingupdate: async function recordingsettingupdate(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingsettingsupdate: async function recordingsettingsupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingrecordingregistrants: async function meetingrecordingregistrants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingrecordingregistrantcreate: async function meetingrecordingregistrantcreate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingrecordingregistrantstatus: async function meetingrecordingregistrantstatus(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingregistrantsquestionsget: async function recordingregistrantsquestionsget(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
recordingregistrantquestionupdate: async function recordingregistrantquestionupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/recordings/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getaccountcloudrecording: async function getaccountcloudrecording(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardmeetings: async function dashboardmeetings(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/meetings",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardmeetingdetail: async function dashboardmeetingdetail(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardmeetingparticipants: async function dashboardmeetingparticipants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardmeetingparticipantqos: async function dashboardmeetingparticipantqos(participantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${participantId ? participantId : this.participantId}/participants/{participantId}/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardmeetingparticipantsqos: async function dashboardmeetingparticipantsqos(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardmeetingparticipantshare: async function dashboardmeetingparticipantshare(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants/sharing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardwebinars: async function dashboardwebinars(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/webinars",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardwebinardetail: async function dashboardwebinardetail(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardwebinarparticipants: async function dashboardwebinarparticipants(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardwebinarparticipantqos: async function dashboardwebinarparticipantqos(participantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${participantId ? participantId : this.participantId}/participants/{participantId}/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardwebinarparticipantsqos: async function dashboardwebinarparticipantsqos(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardwebinarparticipantshare: async function dashboardwebinarparticipantshare(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants/sharing`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardzoomrooms: async function dashboardzoomrooms(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/zoomrooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardzoomroom: async function dashboardzoomroom(zoomroomId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/zoomrooms/${zoomroomId ? zoomroomId : this.zoomroomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardcrc: async function dashboardcrc(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/crc",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardim: async function dashboardim(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/im",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardclientfeedback: async function dashboardclientfeedback(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/client/feedback",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardzoomroomissue: async function dashboardzoomroomissue(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/zoomrooms/issues",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardissuezoomroom: async function dashboardissuezoomroom(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/issues/zoomrooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardissuedetailzoomroom: async function dashboardissuedetailzoomroom(zoomroomId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/issues/zoomrooms/${zoomroomId ? zoomroomId : this.zoomroomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
dashboardclientfeedbackdetail: async function dashboardclientfeedbackdetail(feedbackId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/client/feedback/${feedbackId ? feedbackId : this.feedbackId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listmeetingsatisfaction: async function listmeetingsatisfaction(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/metrics/client/satisfaction",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listcalllogsmetrics: async function listcalllogsmetrics(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/metrics/call_logs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getcalllogmetricsdetails: async function getcalllogmetricsdetails(call_id) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/metrics/call_logs/${call_id ? call_id : this.call_id}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getcallqos: async function getcallqos(callId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/metrics/call_logs/${callId ? callId : this.callId}/qos`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
participantfeedback: async function participantfeedback(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/meetings/${meetingId ? meetingId : this.meetingId}/participants/satisfaction`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
participantwebinarfeedback: async function participantwebinarfeedback(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/metrics/webinars/${webinarId ? webinarId : this.webinarId}/participants/satisfaction`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
devicelist: async function devicelist(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/h323/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
devicecreate: async function devicecreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/h323/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deviceupdate: async function deviceupdate(deviceId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/h323/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
devicedelete: async function devicedelete(deviceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/h323/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groups: async function groups() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groupcreate: async function groupcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
group: async function group(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groupupdate: async function groupupdate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groupdelete: async function groupdelete(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groupmembers: async function groupmembers(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groupmemberscreate: async function groupmemberscreate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
groupmembersdelete: async function groupmembersdelete(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateagroupmember: async function updateagroupmember(memberId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getgroupsettings: async function getgroupsettings(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updategroupsettings: async function updategroupsettings(groupId,queryArgs,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${groupId ? groupId : this.groupId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getgrouplocksettings: async function getgrouplocksettings(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/groups/${groupId ? groupId : this.groupId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
grouplockedsettings: async function grouplockedsettings(groupId,queryArgs,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/groups/${groupId ? groupId : this.groupId}/lock_settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
delgroupvb: async function delgroupvb(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/groups/${groupId ? groupId : this.groupId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
uploadgroupvb: async function uploadgroupvb(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/groups/${groupId ? groupId : this.groupId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroups: async function imgroups() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/im/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroupcreate: async function imgroupcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/im/groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroup: async function imgroup(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/im/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroupupdate: async function imgroupupdate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/im/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroupdelete: async function imgroupdelete(groupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/im/groups/${groupId ? groupId : this.groupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroupmembers: async function imgroupmembers(groupId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/im/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroupmemberscreate: async function imgroupmemberscreate(groupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/im/groups/${groupId ? groupId : this.groupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
imgroupmembersdelete: async function imgroupmembersdelete(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/im/groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetings: async function meetings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/meetings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingcreate: async function meetingcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/meetings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meeting: async function meeting(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingupdate: async function meetingupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingdelete: async function meetingdelete(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingstatus: async function meetingstatus(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingregistrants: async function meetingregistrants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingregistrantcreate: async function meetingregistrantcreate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingregistrantstatus: async function meetingregistrantstatus(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
pastmeetingdetails: async function pastmeetingdetails(meetingUUID) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingUUID ? meetingUUID : this.meetingUUID}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
pastmeetingparticipants: async function pastmeetingparticipants(meetingUUID,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingUUID ? meetingUUID : this.meetingUUID}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
pastmeetings: async function pastmeetings(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingId ? meetingId : this.meetingId}/instances`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingpolls: async function meetingpolls(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingpollcreate: async function meetingpollcreate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingpollget: async function meetingpollget(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingpollupdate: async function meetingpollupdate(pollId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/meetings/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingpolldelete: async function meetingpolldelete(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/meetings/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingregistrantsquestionsget: async function meetingregistrantsquestionsget(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetingregistrantquestionupdate: async function meetingregistrantquestionupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetinginvitation: async function meetinginvitation(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/invitation`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetinglivestreamupdate: async function meetinglivestreamupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/livestream`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getlivestreamdetails: async function getlivestreamdetails(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/meetings/${meetingId ? meetingId : this.meetingId}/livestream`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
meetinglivestreamstatusupdate: async function meetinglivestreamstatusupdate(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/meetings/${meetingId ? meetingId : this.meetingId}/livestream/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listpastmeetingpolls: async function listpastmeetingpolls(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
inmeetingrecordingcontrol: async function inmeetingrecordingcontrol(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/live_meetings/${meetingId ? meetingId : this.meetingId}/events`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
createbatchpolls: async function createbatchpolls(meetingId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/meetings/${meetingId ? meetingId : this.meetingId}/batch_polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listmeetingtemplates: async function listmeetingtemplates(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/meeting_templates`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userpacs: async function userpacs(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/pac`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listaccountphonenumbers: async function listaccountphonenumbers(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/numbers",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
phoneuser: async function phoneuser(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateuserprofile: async function updateuserprofile(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
phoneusersettings: async function phoneusersettings(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
phoneusercalllogs: async function phoneusercalllogs(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/call_logs`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
phoneuserrecordings: async function phoneuserrecordings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
phoneuservoicemails: async function phoneuservoicemails(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/users/${userId ? userId : this.userId}/voice_mails`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
accountcalllogs: async function accountcalllogs(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/call_logs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignphonenumber: async function assignphonenumber(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/users/${userId ? userId : this.userId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignphonenumber: async function unassignphonenumber(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/users/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assigncallingplan: async function assigncallingplan(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/users/${userId ? userId : this.userId}/calling_plans`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassigncallingplan: async function unassigncallingplan(type) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/users/${type ? type : this.type}/calling_plans/{type}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getphonenumberdetails: async function getphonenumberdetails(numberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/numbers/${numberId ? numberId : this.numberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
changemaincompanynumber: async function changemaincompanynumber(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        "/phone/company_number",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listcallingplans: async function listcallingplans() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/calling_plans",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listphoneusers: async function listphoneusers(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletecalllog: async function deletecalllog(callLogId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/users/${callLogId ? callLogId : this.callLogId}/call_logs/{callLogId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addbyocnumber: async function addbyocnumber(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/byoc_numbers",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletevoicemail: async function deletevoicemail(voicemailId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/voice_mails/${voicemailId ? voicemailId : this.voicemailId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateautoreceptionist: async function updateautoreceptionist(autoReceptionistId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/auto_receptionists/${autoReceptionistId ? autoReceptionistId : this.autoReceptionistId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignphonenumbersautoreceptionist: async function assignphonenumbersautoreceptionist(autoReceptionistId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/auto_receptionists/${autoReceptionistId ? autoReceptionistId : this.autoReceptionistId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignallphonenumsautoreceptionist: async function unassignallphonenumsautoreceptionist(autoReceptionistId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/auto_receptionists/${autoReceptionistId ? autoReceptionistId : this.autoReceptionistId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignaphonenumautoreceptionist: async function unassignaphonenumautoreceptionist(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/auto_receptionists/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addautoreceptionist: async function addautoreceptionist(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/auto_receptionists",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addanumbertoblockedlist: async function addanumbertoblockedlist(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/blocked_list",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listblockedlist: async function listblockedlist(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/blocked_list",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateblockedlist: async function updateblockedlist(blockedListId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/blocked_list/${blockedListId ? blockedListId : this.blockedListId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteablockedlist: async function deleteablockedlist(blockedListId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/blocked_list/${blockedListId ? blockedListId : this.blockedListId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getablockedlist: async function getablockedlist(blockedListId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/blocked_list/${blockedListId ? blockedListId : this.blockedListId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
createcallqueue: async function createcallqueue(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/call_queues",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listcallqueues: async function listcallqueues(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/call_queues",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getacallqueue: async function getacallqueue(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatecallqueue: async function updatecallqueue(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteacallqueue: async function deleteacallqueue(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignphonetocallqueue: async function assignphonetocallqueue(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignaphonenumcallqueue: async function unassignaphonenumcallqueue(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignphonenumcallqueue: async function unassignphonenumcallqueue(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addmemberstocallqueue: async function addmemberstocallqueue(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignallmembers: async function unassignallmembers(callQueueId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
unassignmemberfromcallqueue: async function unassignmemberfromcallqueue(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/call_queues/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
changecallqueuemanager: async function changecallqueuemanager(callQueueId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/manager`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getcallqueuerecordings: async function getcallqueuerecordings(callQueueId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/call_queues/${callQueueId ? callQueueId : this.callQueueId}/recordings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addphonedevice: async function addphonedevice(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listphonedevices: async function listphonedevices(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/devices",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateadevice: async function updateadevice(deviceId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteadevice: async function deleteadevice(deviceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getadevice: async function getadevice(deviceId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/devices/${deviceId ? deviceId : this.deviceId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getpsoperationlogs: async function getpsoperationlogs(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/reports/operationlogs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listsharedlinegroups: async function listsharedlinegroups(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/shared_line_groups",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getasharedlinegroup: async function getasharedlinegroup(sharedLineGroupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateasharedlinegroup: async function updateasharedlinegroup(sharedLineGroupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteasharedlinegroup: async function deleteasharedlinegroup(sharedLineGroupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addmemberstosharedlinegroup: async function addmemberstosharedlinegroup(sharedLineGroupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletemembersofslg: async function deletemembersofslg(sharedLineGroupId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteamemberslg: async function deleteamemberslg(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignphonenumbersslg: async function assignphonenumbersslg(sharedLineGroupId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/phone/shared_line_groups/${sharedLineGroupId ? sharedLineGroupId : this.sharedLineGroupId}/phone_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteaphonenumberslg: async function deleteaphonenumberslg(phoneNumberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/shared_line_groups/${phoneNumberId ? phoneNumberId : this.phoneNumberId}/phone_numbers/{phoneNumberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
createphonesite: async function createphonesite(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/sites",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listphonesites: async function listphonesites(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/sites",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getasite: async function getasite(siteId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/sites/${siteId ? siteId : this.siteId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletephonesite: async function deletephonesite(siteId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/sites/${siteId ? siteId : this.siteId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatesitedetails: async function updatesitedetails(siteId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/sites/${siteId ? siteId : this.siteId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addcommonareaphone: async function addcommonareaphone(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/phone/common_area_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listcommonareaphones: async function listcommonareaphones(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/phone/common_area_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getacommonareaphone: async function getacommonareaphone(commonAreaPhoneId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/phone/common_area_phones/${commonAreaPhoneId ? commonAreaPhoneId : this.commonAreaPhoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatecommonareaphone: async function updatecommonareaphone(commonAreaPhoneId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/phone/common_area_phones/${commonAreaPhoneId ? commonAreaPhoneId : this.commonAreaPhoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletecommonareaphone: async function deletecommonareaphone(commonAreaPhoneId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/phone/common_area_phones/${commonAreaPhoneId ? commonAreaPhoneId : this.commonAreaPhoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportdaily: async function reportdaily(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/daily",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportusers: async function reportusers(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportmeetings: async function reportmeetings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/users/${userId ? userId : this.userId}/meetings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportmeetingdetails: async function reportmeetingdetails(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/meetings/${meetingId ? meetingId : this.meetingId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportmeetingparticipants: async function reportmeetingparticipants(meetingId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/meetings/${meetingId ? meetingId : this.meetingId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportmeetingpolls: async function reportmeetingpolls(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/meetings/${meetingId ? meetingId : this.meetingId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportwebinardetails: async function reportwebinardetails(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportwebinarparticipants: async function reportwebinarparticipants(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}/participants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportwebinarpolls: async function reportwebinarpolls(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportwebinarqa: async function reportwebinarqa(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/report/webinars/${webinarId ? webinarId : this.webinarId}/qa`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reporttelephone: async function reporttelephone(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/telephone",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportcloudrecording: async function reportcloudrecording(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/cloud_recording",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportoperationlogs: async function reportoperationlogs(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/operationlogs",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
reportsigninsignoutactivities: async function reportsigninsignoutactivities(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/report/activities",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
roles: async function roles() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/roles",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
createrole: async function createrole(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/roles",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
rolemembers: async function rolemembers(roleId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/roles/${roleId ? roleId : this.roleId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addrolemembers: async function addrolemembers(roleId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/roles/${roleId ? roleId : this.roleId}/members`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
rolememberdelete: async function rolememberdelete(memberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/roles/${memberId ? memberId : this.memberId}/members/{memberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getroleinformation: async function getroleinformation(roleId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/roles/${roleId ? roleId : this.roleId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updaterole: async function updaterole(roleId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/roles/${roleId ? roleId : this.roleId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleterole: async function deleterole(roleId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/roles/${roleId ? roleId : this.roleId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listzoomrooms: async function listzoomrooms(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addaroom: async function addaroom(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/rooms",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzrprofile: async function getzrprofile(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/${roomId ? roomId : this.roomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteazoomroom: async function deleteazoomroom(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/rooms/${roomId ? roomId : this.roomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updateroomprofile: async function updateroomprofile(roomId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/${roomId ? roomId : this.roomId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzrsettings: async function getzrsettings(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/${roomId ? roomId : this.roomId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatezrsettings: async function updatezrsettings(roomId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/${roomId ? roomId : this.roomId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listzrdevices: async function listzrdevices(roomId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/${roomId ? roomId : this.roomId}/devices`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
changezrlocation: async function changezrlocation(roomId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/rooms/${roomId ? roomId : this.roomId}/location`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
checkinrooms: async function checkinrooms(id,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/${id ? id : this.id}/events`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listdigitalsignagecontent: async function listdigitalsignagecontent(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/digital_signage",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
managee911signage: async function managee911signage(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/events",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzraccountprofile: async function getzraccountprofile() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/account_profile",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatezraccprofile: async function updatezraccprofile(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/account_profile",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzraccountsettings: async function getzraccountsettings() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/account_settings",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatezoomroomaccsettings: async function updatezoomroomaccsettings(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/account_settings",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listzrlocations: async function listzrlocations(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/locations",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addazrlocation: async function addazrlocation(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/rooms/locations",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzrlocationprofile: async function getzrlocationprofile(locationId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/locations/${locationId ? locationId : this.locationId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatezrlocationprofile: async function updatezrlocationprofile(locationId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/locations/${locationId ? locationId : this.locationId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzrlocationsettings: async function getzrlocationsettings(locationId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/rooms/locations/${locationId ? locationId : this.locationId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatezrlocationsettings: async function updatezrlocationsettings(locationId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/rooms/locations/${locationId ? locationId : this.locationId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
getzrlocationstructure: async function getzrlocationstructure() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/rooms/locations/structure",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatezoomroomslocationstructure: async function updatezoomroomslocationstructure(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/rooms/locations/structure",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
changeparentlocation: async function changeparentlocation(locationId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/rooms/locations/${locationId ? locationId : this.locationId}/location`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listsipphones: async function listsipphones(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/sip_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
createsipphone: async function createsipphone(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/sip_phones",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatesipphone: async function updatesipphone(phoneId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/sip_phones/${phoneId ? phoneId : this.phoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletesipphone: async function deletesipphone(phoneId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/sip_phones/${phoneId ? phoneId : this.phoneId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
trackingfieldlist: async function trackingfieldlist() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/tracking_fields",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
trackingfieldcreate: async function trackingfieldcreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/tracking_fields",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
trackingfieldget: async function trackingfieldget(fieldId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/tracking_fields/${fieldId ? fieldId : this.fieldId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
trackingfieldupdate: async function trackingfieldupdate(fieldId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/tracking_fields/${fieldId ? fieldId : this.fieldId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
trackingfielddelete: async function trackingfielddelete(fieldId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/tracking_fields/${fieldId ? fieldId : this.fieldId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
tsp: async function tsp() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/tsp",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
tspupdate: async function tspupdate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        "/tsp",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usertsps: async function usertsps(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/tsp`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usertspcreate: async function usertspcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/tsp`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usertsp: async function usertsp(tspId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${tspId ? tspId : this.tspId}/tsp/{tspId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usertspupdate: async function usertspupdate(tspId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${tspId ? tspId : this.tspId}/tsp/{tspId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usertspdelete: async function usertspdelete(tspId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${tspId ? tspId : this.tspId}/tsp/{tspId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
tspurlupdate: async function tspurlupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${userId ? userId : this.userId}/tsp/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
users: async function users(queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usercreate: async function usercreate(bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        "/users",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
user: async function user(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userupdate: async function userupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userdelete: async function userdelete(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userassistants: async function userassistants(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/assistants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userassistantcreate: async function userassistantcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/assistants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userassistantsdelete: async function userassistantsdelete(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/assistants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userassistantdelete: async function userassistantdelete(assistantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${assistantId ? assistantId : this.assistantId}/assistants/{assistantId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userschedulers: async function userschedulers(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/schedulers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userschedulersdelete: async function userschedulersdelete(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/schedulers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userschedulerdelete: async function userschedulerdelete(schedulerId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${schedulerId ? schedulerId : this.schedulerId}/schedulers/{schedulerId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userpicture: async function userpicture(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/picture`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usersettings: async function usersettings(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usersettingsupdate: async function usersettingsupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/users/${userId ? userId : this.userId}/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userstatus: async function userstatus(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userpassword: async function userpassword(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/password`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userpermission: async function userpermission(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/permissions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
usertoken: async function usertoken(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/token`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
userssotokendelete: async function userssotokendelete(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/token`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
useremail: async function useremail() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/users/email",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
useremailupdate: async function useremailupdate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/email`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
uservanityname: async function uservanityname() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/users/vanity_name",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
switchuseraccount: async function switchuseraccount(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/accounts/${userId ? userId : this.userId}/users/{userId}/account`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
updatepresencestatus: async function updatepresencestatus(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/users/${userId ? userId : this.userId}/presence_status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
uploadvbuser: async function uploadvbuser(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deluservb: async function deluservb(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/users/${userId ? userId : this.userId}/settings/virtual_backgrounds`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinars: async function webinars(userId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/webinars`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarcreate: async function webinarcreate(userId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/users/${userId ? userId : this.userId}/webinars`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinar: async function webinar(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarupdate: async function webinarupdate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinardelete: async function webinardelete(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${webinarId ? webinarId : this.webinarId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarstatus: async function webinarstatus(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/webinars/${webinarId ? webinarId : this.webinarId}/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpanelists: async function webinarpanelists(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/panelists`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpanelistcreate: async function webinarpanelistcreate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/webinars/${webinarId ? webinarId : this.webinarId}/panelists`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpanelistsdelete: async function webinarpanelistsdelete(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${webinarId ? webinarId : this.webinarId}/panelists`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpanelistdelete: async function webinarpanelistdelete(panelistId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${panelistId ? panelistId : this.panelistId}/panelists/{panelistId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarregistrants: async function webinarregistrants(webinarId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarregistrantcreate: async function webinarregistrantcreate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarregistrantstatus: async function webinarregistrantstatus(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants/status`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
pastwebinars: async function pastwebinars(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${webinarId ? webinarId : this.webinarId}/instances`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpolls: async function webinarpolls(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpollcreate: async function webinarpollcreate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpollget: async function webinarpollget(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpollupdate: async function webinarpollupdate(pollId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/webinars/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarpolldelete: async function webinarpolldelete(pollId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/webinars/${pollId ? pollId : this.pollId}/polls/{pollId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarregistrantsquestionsget: async function webinarregistrantsquestionsget(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarregistrantquestionupdate: async function webinarregistrantquestionupdate(webinarId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/webinars/${webinarId ? webinarId : this.webinarId}/registrants/questions`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarregistrantget: async function webinarregistrantget(registrantId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${registrantId ? registrantId : this.registrantId}/registrants/{registrantId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
webinarabsentees: async function webinarabsentees(WebinarUUID,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${WebinarUUID ? WebinarUUID : this.WebinarUUID}/absentees`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
gettrackingsources: async function gettrackingsources(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/webinars/${webinarId ? webinarId : this.webinarId}/tracking_sources`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listpastwebinarpollresults: async function listpastwebinarpollresults(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${webinarId ? webinarId : this.webinarId}/polls`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listpastwebinarqa: async function listpastwebinarqa(webinarId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_webinars/${webinarId ? webinarId : this.webinarId}/qa`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listwebinartemplates: async function listwebinartemplates(userId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/users/${userId ? userId : this.userId}/webinar_templates`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
changezoomroomsappversion: async function changezoomroomsappversion(deviceId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PUT",
        `/rooms/${deviceId ? deviceId : this.deviceId}/devices/{deviceId}/app_version`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listsiptrunknumbers: async function listsiptrunknumbers() {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        "/sip_trunk/numbers",
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignsipconfig: async function assignsipconfig(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "PATCH",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/settings`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignsiptrunknumbers: async function assignsiptrunknumbers(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteallsipnumbers: async function deleteallsipnumbers(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listsiptrunks: async function listsiptrunks(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/trunks`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
assignsiptrunks: async function assignsiptrunks(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/trunks`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deletesiptrunk: async function deletesiptrunk(trunkId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${trunkId ? trunkId : this.trunkId}/sip_trunk/trunks/{trunkId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addcalloutcountries: async function addcalloutcountries(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/callout_countries`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listinternalcalloutcountries: async function listinternalcalloutcountries(accountId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/callout_countries`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteinternalcalloutcountry: async function deleteinternalcalloutcountry(countryId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${countryId ? countryId : this.countryId}/sip_trunk/callout_countries/{countryId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
addinternalnumbers: async function addinternalnumbers(accountId,bodyArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "POST",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/internal_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listinternalnumbers: async function listinternalnumbers(accountId,queryArgs) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/accounts/${accountId ? accountId : this.accountId}/sip_trunk/internal_numbers`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
deleteinternalnumber: async function deleteinternalnumber(numberId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "DELETE",
        `/accounts/${numberId ? numberId : this.numberId}/sip_trunk/internal_numbers/{numberId}`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
listpastmeetingfiles: async function listpastmeetingfiles(meetingId) {
    let query
    let body
    if(typeof queryArgs != "undefined"){
      query = queryArgs ? queryArgs : null
    }
    if(typeof bodyArgs != "undefined"){
      body = bodyArgs ? bodyArgs : null
    }
    try {
      const zoomResponse = await this.go(
        "GET",
        `/past_meetings/${meetingId ? meetingId : this.meetingId}/files`,
        query,
        body
      );
      return zoomResponse;
    } catch (err) {
      return err;
    }
  },
};

module.exports = Zoom;
